
Traffic_light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000848  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000848  000008dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800084  00800084  00000900  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000930  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a47  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a22  00000000  00000000  000025c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001133  00000000  00000000  00002fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  00004118  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007da  00000000  00000000  000044f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000105d  00000000  00000000  00004cce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00005d2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 c1 03 	jmp	0x782	; 0x782 <__vector_10>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	2d 01       	movw	r4, r26
  56:	46 01       	movw	r8, r12
  58:	5f 01       	movw	r10, r30
  5a:	78 01       	movw	r14, r16
  5c:	90 01       	movw	r18, r0
  5e:	90 01       	movw	r18, r0
  60:	90 01       	movw	r18, r0
  62:	90 01       	movw	r18, r0
  64:	90 01       	movw	r18, r0
  66:	90 01       	movw	r18, r0
  68:	90 01       	movw	r18, r0
  6a:	90 01       	movw	r18, r0
  6c:	90 01       	movw	r18, r0
  6e:	90 01       	movw	r18, r0
  70:	90 01       	movw	r18, r0
  72:	90 01       	movw	r18, r0
  74:	90 01       	movw	r18, r0
  76:	90 01       	movw	r18, r0
  78:	90 01       	movw	r18, r0
  7a:	90 01       	movw	r18, r0
  7c:	90 01       	movw	r18, r0
  7e:	90 01       	movw	r18, r0
  80:	90 01       	movw	r18, r0
  82:	90 01       	movw	r18, r0
  84:	90 01       	movw	r18, r0
  86:	90 01       	movw	r18, r0
  88:	90 01       	movw	r18, r0
  8a:	90 01       	movw	r18, r0
  8c:	90 01       	movw	r18, r0
  8e:	90 01       	movw	r18, r0
  90:	90 01       	movw	r18, r0
  92:	90 01       	movw	r18, r0
  94:	2d 01       	movw	r4, r26
  96:	46 01       	movw	r8, r12
  98:	5f 01       	movw	r10, r30
  9a:	78 01       	movw	r14, r16
  9c:	9d 01       	movw	r18, r26
  9e:	b6 01       	movw	r22, r12
  a0:	cf 01       	movw	r24, r30
  a2:	e8 01       	movw	r28, r16
  a4:	00 02       	muls	r16, r16
  a6:	00 02       	muls	r16, r16
  a8:	00 02       	muls	r16, r16
  aa:	00 02       	muls	r16, r16
  ac:	00 02       	muls	r16, r16
  ae:	00 02       	muls	r16, r16
  b0:	00 02       	muls	r16, r16
  b2:	00 02       	muls	r16, r16
  b4:	00 02       	muls	r16, r16
  b6:	00 02       	muls	r16, r16
  b8:	00 02       	muls	r16, r16
  ba:	00 02       	muls	r16, r16
  bc:	00 02       	muls	r16, r16
  be:	00 02       	muls	r16, r16
  c0:	00 02       	muls	r16, r16
  c2:	00 02       	muls	r16, r16
  c4:	00 02       	muls	r16, r16
  c6:	00 02       	muls	r16, r16
  c8:	00 02       	muls	r16, r16
  ca:	00 02       	muls	r16, r16
  cc:	00 02       	muls	r16, r16
  ce:	00 02       	muls	r16, r16
  d0:	00 02       	muls	r16, r16
  d2:	00 02       	muls	r16, r16
  d4:	00 02       	muls	r16, r16
  d6:	00 02       	muls	r16, r16
  d8:	00 02       	muls	r16, r16
  da:	00 02       	muls	r16, r16
  dc:	9d 01       	movw	r18, r26
  de:	b6 01       	movw	r22, r12
  e0:	cf 01       	movw	r24, r30
  e2:	e8 01       	movw	r28, r16
  e4:	0c 02       	muls	r16, r28
  e6:	0e 02       	muls	r16, r30
  e8:	10 02       	muls	r17, r16
  ea:	12 02       	muls	r17, r18
  ec:	13 02       	muls	r17, r19
  ee:	13 02       	muls	r17, r19
  f0:	13 02       	muls	r17, r19
  f2:	13 02       	muls	r17, r19
  f4:	13 02       	muls	r17, r19
  f6:	13 02       	muls	r17, r19
  f8:	13 02       	muls	r17, r19
  fa:	13 02       	muls	r17, r19
  fc:	13 02       	muls	r17, r19
  fe:	13 02       	muls	r17, r19
 100:	13 02       	muls	r17, r19
 102:	13 02       	muls	r17, r19
 104:	13 02       	muls	r17, r19
 106:	13 02       	muls	r17, r19
 108:	13 02       	muls	r17, r19
 10a:	13 02       	muls	r17, r19
 10c:	13 02       	muls	r17, r19
 10e:	13 02       	muls	r17, r19
 110:	13 02       	muls	r17, r19
 112:	13 02       	muls	r17, r19
 114:	13 02       	muls	r17, r19
 116:	13 02       	muls	r17, r19
 118:	13 02       	muls	r17, r19
 11a:	13 02       	muls	r17, r19
 11c:	13 02       	muls	r17, r19
 11e:	13 02       	muls	r17, r19
 120:	13 02       	muls	r17, r19
 122:	13 02       	muls	r17, r19
 124:	0c 02       	muls	r16, r28
 126:	0e 02       	muls	r16, r30
 128:	10 02       	muls	r17, r16
 12a:	12 02       	muls	r17, r18
 12c:	1f 02       	muls	r17, r31
 12e:	21 02       	muls	r18, r17
 130:	23 02       	muls	r18, r19
 132:	25 02       	muls	r18, r21
 134:	26 02       	muls	r18, r22
 136:	26 02       	muls	r18, r22
 138:	26 02       	muls	r18, r22
 13a:	26 02       	muls	r18, r22
 13c:	26 02       	muls	r18, r22
 13e:	26 02       	muls	r18, r22
 140:	26 02       	muls	r18, r22
 142:	26 02       	muls	r18, r22
 144:	26 02       	muls	r18, r22
 146:	26 02       	muls	r18, r22
 148:	26 02       	muls	r18, r22
 14a:	26 02       	muls	r18, r22
 14c:	26 02       	muls	r18, r22
 14e:	26 02       	muls	r18, r22
 150:	26 02       	muls	r18, r22
 152:	26 02       	muls	r18, r22
 154:	26 02       	muls	r18, r22
 156:	26 02       	muls	r18, r22
 158:	26 02       	muls	r18, r22
 15a:	26 02       	muls	r18, r22
 15c:	26 02       	muls	r18, r22
 15e:	26 02       	muls	r18, r22
 160:	26 02       	muls	r18, r22
 162:	26 02       	muls	r18, r22
 164:	26 02       	muls	r18, r22
 166:	26 02       	muls	r18, r22
 168:	26 02       	muls	r18, r22
 16a:	26 02       	muls	r18, r22
 16c:	1f 02       	muls	r17, r31
 16e:	21 02       	muls	r18, r17
 170:	23 02       	muls	r18, r19
 172:	25 02       	muls	r18, r21
 174:	33 02       	muls	r19, r19
 176:	3a 02       	muls	r19, r26
 178:	41 02       	muls	r20, r17
 17a:	48 02       	muls	r20, r24
 17c:	4e 02       	muls	r20, r30
 17e:	4e 02       	muls	r20, r30
 180:	4e 02       	muls	r20, r30
 182:	4e 02       	muls	r20, r30
 184:	4e 02       	muls	r20, r30
 186:	4e 02       	muls	r20, r30
 188:	4e 02       	muls	r20, r30
 18a:	4e 02       	muls	r20, r30
 18c:	4e 02       	muls	r20, r30
 18e:	4e 02       	muls	r20, r30
 190:	4e 02       	muls	r20, r30
 192:	4e 02       	muls	r20, r30
 194:	4e 02       	muls	r20, r30
 196:	4e 02       	muls	r20, r30
 198:	4e 02       	muls	r20, r30
 19a:	4e 02       	muls	r20, r30
 19c:	4e 02       	muls	r20, r30
 19e:	4e 02       	muls	r20, r30
 1a0:	4e 02       	muls	r20, r30
 1a2:	4e 02       	muls	r20, r30
 1a4:	4e 02       	muls	r20, r30
 1a6:	4e 02       	muls	r20, r30
 1a8:	4e 02       	muls	r20, r30
 1aa:	4e 02       	muls	r20, r30
 1ac:	4e 02       	muls	r20, r30
 1ae:	4e 02       	muls	r20, r30
 1b0:	4e 02       	muls	r20, r30
 1b2:	4e 02       	muls	r20, r30
 1b4:	33 02       	muls	r19, r19
 1b6:	3a 02       	muls	r19, r26
 1b8:	41 02       	muls	r20, r17
 1ba:	48 02       	muls	r20, r24
 1bc:	5c 02       	muls	r21, r28
 1be:	63 02       	muls	r22, r19
 1c0:	6a 02       	muls	r22, r26
 1c2:	71 02       	muls	r23, r17
 1c4:	77 02       	muls	r23, r23
 1c6:	77 02       	muls	r23, r23
 1c8:	77 02       	muls	r23, r23
 1ca:	77 02       	muls	r23, r23
 1cc:	77 02       	muls	r23, r23
 1ce:	77 02       	muls	r23, r23
 1d0:	77 02       	muls	r23, r23
 1d2:	77 02       	muls	r23, r23
 1d4:	77 02       	muls	r23, r23
 1d6:	77 02       	muls	r23, r23
 1d8:	77 02       	muls	r23, r23
 1da:	77 02       	muls	r23, r23
 1dc:	77 02       	muls	r23, r23
 1de:	77 02       	muls	r23, r23
 1e0:	77 02       	muls	r23, r23
 1e2:	77 02       	muls	r23, r23
 1e4:	77 02       	muls	r23, r23
 1e6:	77 02       	muls	r23, r23
 1e8:	77 02       	muls	r23, r23
 1ea:	77 02       	muls	r23, r23
 1ec:	77 02       	muls	r23, r23
 1ee:	77 02       	muls	r23, r23
 1f0:	77 02       	muls	r23, r23
 1f2:	77 02       	muls	r23, r23
 1f4:	77 02       	muls	r23, r23
 1f6:	77 02       	muls	r23, r23
 1f8:	77 02       	muls	r23, r23
 1fa:	77 02       	muls	r23, r23
 1fc:	5c 02       	muls	r21, r28
 1fe:	63 02       	muls	r22, r19
 200:	6a 02       	muls	r22, r26
 202:	71 02       	muls	r23, r17

00000204 <__ctors_end>:
 204:	11 24       	eor	r1, r1
 206:	1f be       	out	0x3f, r1	; 63
 208:	cf e5       	ldi	r28, 0x5F	; 95
 20a:	d8 e0       	ldi	r29, 0x08	; 8
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	cd bf       	out	0x3d, r28	; 61

00000210 <__do_copy_data>:
 210:	10 e0       	ldi	r17, 0x00	; 0
 212:	a0 e6       	ldi	r26, 0x60	; 96
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	e8 e4       	ldi	r30, 0x48	; 72
 218:	f8 e0       	ldi	r31, 0x08	; 8
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x10>
 21c:	05 90       	lpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a4 38       	cpi	r26, 0x84	; 132
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0xc>

00000226 <__do_clear_bss>:
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	a4 e8       	ldi	r26, 0x84	; 132
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a5 38       	cpi	r26, 0x85	; 133
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 1c 03 	call	0x638	; 0x638 <main>
 23a:	0c 94 22 04 	jmp	0x844	; 0x844 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <DIO_set_pin_dir>:
		{
			SET_BIT(PORTD,pin_number);
		}
		else
		{
			CLR_BIT(PORTD,pin_number);
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	fc 01       	movw	r30, r24
 246:	e1 54       	subi	r30, 0x41	; 65
 248:	f1 09       	sbc	r31, r1
 24a:	e4 32       	cpi	r30, 0x24	; 36
 24c:	f1 05       	cpc	r31, r1
 24e:	08 f0       	brcs	.+2      	; 0x252 <DIO_set_pin_dir+0x10>
 250:	67 c0       	rjmp	.+206    	; 0x320 <DIO_set_pin_dir+0xde>
 252:	e6 5d       	subi	r30, 0xD6	; 214
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	0c 94 1c 04 	jmp	0x838	; 0x838 <__tablejump2__>
 25a:	41 30       	cpi	r20, 0x01	; 1
 25c:	59 f4       	brne	.+22     	; 0x274 <DIO_set_pin_dir+0x32>
 25e:	2a b3       	in	r18, 0x1a	; 26
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_set_pin_dir+0x28>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_set_pin_dir+0x24>
 26e:	82 2b       	or	r24, r18
 270:	8a bb       	out	0x1a, r24	; 26
 272:	08 95       	ret
 274:	2a b3       	in	r18, 0x1a	; 26
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_set_pin_dir+0x3e>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_set_pin_dir+0x3a>
 284:	80 95       	com	r24
 286:	82 23       	and	r24, r18
 288:	8a bb       	out	0x1a, r24	; 26
 28a:	08 95       	ret
 28c:	41 30       	cpi	r20, 0x01	; 1
 28e:	59 f4       	brne	.+22     	; 0x2a6 <DIO_set_pin_dir+0x64>
 290:	27 b3       	in	r18, 0x17	; 23
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_set_pin_dir+0x5a>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_set_pin_dir+0x56>
 2a0:	82 2b       	or	r24, r18
 2a2:	87 bb       	out	0x17, r24	; 23
 2a4:	08 95       	ret
 2a6:	27 b3       	in	r18, 0x17	; 23
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_set_pin_dir+0x70>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_set_pin_dir+0x6c>
 2b6:	80 95       	com	r24
 2b8:	82 23       	and	r24, r18
 2ba:	87 bb       	out	0x17, r24	; 23
 2bc:	08 95       	ret
 2be:	41 30       	cpi	r20, 0x01	; 1
 2c0:	59 f4       	brne	.+22     	; 0x2d8 <DIO_set_pin_dir+0x96>
 2c2:	24 b3       	in	r18, 0x14	; 20
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_set_pin_dir+0x8c>
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_set_pin_dir+0x88>
 2d2:	82 2b       	or	r24, r18
 2d4:	84 bb       	out	0x14, r24	; 20
 2d6:	08 95       	ret
 2d8:	24 b3       	in	r18, 0x14	; 20
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_set_pin_dir+0xa2>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_set_pin_dir+0x9e>
 2e8:	80 95       	com	r24
 2ea:	82 23       	and	r24, r18
 2ec:	84 bb       	out	0x14, r24	; 20
 2ee:	08 95       	ret
 2f0:	41 30       	cpi	r20, 0x01	; 1
 2f2:	59 f4       	brne	.+22     	; 0x30a <DIO_set_pin_dir+0xc8>
 2f4:	21 b3       	in	r18, 0x11	; 17
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_set_pin_dir+0xbe>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_set_pin_dir+0xba>
 304:	82 2b       	or	r24, r18
 306:	81 bb       	out	0x11, r24	; 17
 308:	08 95       	ret
 30a:	21 b3       	in	r18, 0x11	; 17
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_set_pin_dir+0xd4>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_set_pin_dir+0xd0>
 31a:	80 95       	com	r24
 31c:	82 23       	and	r24, r18
 31e:	81 bb       	out	0x11, r24	; 17
 320:	08 95       	ret

00000322 <DIO_write_pin>:
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	fc 01       	movw	r30, r24
 326:	e1 54       	subi	r30, 0x41	; 65
 328:	f1 09       	sbc	r31, r1
 32a:	e4 32       	cpi	r30, 0x24	; 36
 32c:	f1 05       	cpc	r31, r1
 32e:	08 f0       	brcs	.+2      	; 0x332 <DIO_write_pin+0x10>
 330:	67 c0       	rjmp	.+206    	; 0x400 <__EEPROM_REGION_LENGTH__>
 332:	e2 5b       	subi	r30, 0xB2	; 178
 334:	ff 4f       	sbci	r31, 0xFF	; 255
 336:	0c 94 1c 04 	jmp	0x838	; 0x838 <__tablejump2__>
 33a:	41 30       	cpi	r20, 0x01	; 1
 33c:	59 f4       	brne	.+22     	; 0x354 <DIO_write_pin+0x32>
 33e:	2b b3       	in	r18, 0x1b	; 27
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_write_pin+0x28>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_write_pin+0x24>
 34e:	82 2b       	or	r24, r18
 350:	8b bb       	out	0x1b, r24	; 27
 352:	08 95       	ret
 354:	2b b3       	in	r18, 0x1b	; 27
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_write_pin+0x3e>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_write_pin+0x3a>
 364:	80 95       	com	r24
 366:	82 23       	and	r24, r18
 368:	8b bb       	out	0x1b, r24	; 27
 36a:	08 95       	ret
 36c:	41 30       	cpi	r20, 0x01	; 1
 36e:	59 f4       	brne	.+22     	; 0x386 <DIO_write_pin+0x64>
 370:	28 b3       	in	r18, 0x18	; 24
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_write_pin+0x5a>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_write_pin+0x56>
 380:	82 2b       	or	r24, r18
 382:	88 bb       	out	0x18, r24	; 24
 384:	08 95       	ret
 386:	28 b3       	in	r18, 0x18	; 24
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_write_pin+0x70>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_write_pin+0x6c>
 396:	80 95       	com	r24
 398:	82 23       	and	r24, r18
 39a:	88 bb       	out	0x18, r24	; 24
 39c:	08 95       	ret
 39e:	41 30       	cpi	r20, 0x01	; 1
 3a0:	59 f4       	brne	.+22     	; 0x3b8 <DIO_write_pin+0x96>
 3a2:	25 b3       	in	r18, 0x15	; 21
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_write_pin+0x8c>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_write_pin+0x88>
 3b2:	82 2b       	or	r24, r18
 3b4:	85 bb       	out	0x15, r24	; 21
 3b6:	08 95       	ret
 3b8:	25 b3       	in	r18, 0x15	; 21
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_write_pin+0xa2>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_write_pin+0x9e>
 3c8:	80 95       	com	r24
 3ca:	82 23       	and	r24, r18
 3cc:	85 bb       	out	0x15, r24	; 21
 3ce:	08 95       	ret
 3d0:	41 30       	cpi	r20, 0x01	; 1
 3d2:	59 f4       	brne	.+22     	; 0x3ea <DIO_write_pin+0xc8>
 3d4:	22 b3       	in	r18, 0x12	; 18
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_write_pin+0xbe>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_write_pin+0xba>
 3e4:	82 2b       	or	r24, r18
 3e6:	82 bb       	out	0x12, r24	; 18
 3e8:	08 95       	ret
 3ea:	22 b3       	in	r18, 0x12	; 18
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_write_pin+0xd4>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	6a 95       	dec	r22
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_write_pin+0xd0>
 3fa:	80 95       	com	r24
 3fc:	82 23       	and	r24, r18
 3fe:	82 bb       	out	0x12, r24	; 18
 400:	08 95       	ret

00000402 <DIO_set_port_dir>:
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	fc 01       	movw	r30, r24
 406:	e1 54       	subi	r30, 0x41	; 65
 408:	f1 09       	sbc	r31, r1
 40a:	e4 32       	cpi	r30, 0x24	; 36
 40c:	f1 05       	cpc	r31, r1
 40e:	58 f4       	brcc	.+22     	; 0x426 <DIO_set_port_dir+0x24>
 410:	ee 58       	subi	r30, 0x8E	; 142
 412:	ff 4f       	sbci	r31, 0xFF	; 255
 414:	0c 94 1c 04 	jmp	0x838	; 0x838 <__tablejump2__>
 418:	6a bb       	out	0x1a, r22	; 26
 41a:	08 95       	ret
 41c:	67 bb       	out	0x17, r22	; 23
 41e:	08 95       	ret
 420:	64 bb       	out	0x14, r22	; 20
 422:	08 95       	ret
 424:	61 bb       	out	0x11, r22	; 17
 426:	08 95       	ret

00000428 <DIO_write_port>:
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	fc 01       	movw	r30, r24
 42c:	e1 54       	subi	r30, 0x41	; 65
 42e:	f1 09       	sbc	r31, r1
 430:	e4 32       	cpi	r30, 0x24	; 36
 432:	f1 05       	cpc	r31, r1
 434:	58 f4       	brcc	.+22     	; 0x44c <DIO_write_port+0x24>
 436:	ea 56       	subi	r30, 0x6A	; 106
 438:	ff 4f       	sbci	r31, 0xFF	; 255
 43a:	0c 94 1c 04 	jmp	0x838	; 0x838 <__tablejump2__>
 43e:	6b bb       	out	0x1b, r22	; 27
 440:	08 95       	ret
 442:	68 bb       	out	0x18, r22	; 24
 444:	08 95       	ret
 446:	65 bb       	out	0x15, r22	; 21
 448:	08 95       	ret
 44a:	62 bb       	out	0x12, r22	; 18
 44c:	08 95       	ret

0000044e <DIO_write_low_nibble>:
	}
}

void DIO_write_low_nibble(unsigned char port, unsigned char value )
{
	value&=0x0F;
 44e:	6f 70       	andi	r22, 0x0F	; 15
	switch(port)
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	fc 01       	movw	r30, r24
 454:	e1 54       	subi	r30, 0x41	; 65
 456:	f1 09       	sbc	r31, r1
 458:	e4 32       	cpi	r30, 0x24	; 36
 45a:	f1 05       	cpc	r31, r1
 45c:	f8 f4       	brcc	.+62     	; 0x49c <DIO_write_low_nibble+0x4e>
 45e:	e6 54       	subi	r30, 0x46	; 70
 460:	ff 4f       	sbci	r31, 0xFF	; 255
 462:	0c 94 1c 04 	jmp	0x838	; 0x838 <__tablejump2__>
	{
		case 'A':
		case 'a':
		PORTA&=0xf0;
 466:	8b b3       	in	r24, 0x1b	; 27
 468:	80 7f       	andi	r24, 0xF0	; 240
 46a:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 46c:	8b b3       	in	r24, 0x1b	; 27
 46e:	68 2b       	or	r22, r24
 470:	6b bb       	out	0x1b, r22	; 27
		break;
 472:	08 95       	ret
		case 'B':
		case 'b':
		PORTB&=0xf0;
 474:	88 b3       	in	r24, 0x18	; 24
 476:	80 7f       	andi	r24, 0xF0	; 240
 478:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 47a:	88 b3       	in	r24, 0x18	; 24
 47c:	68 2b       	or	r22, r24
 47e:	68 bb       	out	0x18, r22	; 24
		break;
 480:	08 95       	ret
		case 'C':
		case 'c':
		PORTC&=0xf0;
 482:	85 b3       	in	r24, 0x15	; 21
 484:	80 7f       	andi	r24, 0xF0	; 240
 486:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 488:	85 b3       	in	r24, 0x15	; 21
 48a:	68 2b       	or	r22, r24
 48c:	65 bb       	out	0x15, r22	; 21
		break;
 48e:	08 95       	ret
		case 'D':
		case 'd':
		PORTD&=0xf0;
 490:	82 b3       	in	r24, 0x12	; 18
 492:	80 7f       	andi	r24, 0xF0	; 240
 494:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 496:	82 b3       	in	r24, 0x12	; 18
 498:	68 2b       	or	r22, r24
 49a:	62 bb       	out	0x12, r22	; 18
 49c:	08 95       	ret

0000049e <DIO_write_high_nibble>:
	}
}

void DIO_write_high_nibble(unsigned char port,unsigned char number)
{
	number<<=4;
 49e:	62 95       	swap	r22
 4a0:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	fc 01       	movw	r30, r24
 4a6:	e1 54       	subi	r30, 0x41	; 65
 4a8:	f1 09       	sbc	r31, r1
 4aa:	e4 32       	cpi	r30, 0x24	; 36
 4ac:	f1 05       	cpc	r31, r1
 4ae:	f8 f4       	brcc	.+62     	; 0x4ee <DIO_write_high_nibble+0x50>
 4b0:	e2 52       	subi	r30, 0x22	; 34
 4b2:	ff 4f       	sbci	r31, 0xFF	; 255
 4b4:	0c 94 1c 04 	jmp	0x838	; 0x838 <__tablejump2__>
	{
		case 'A':
		case 'a':
		PORTA&=0x0F;
 4b8:	8b b3       	in	r24, 0x1b	; 27
 4ba:	8f 70       	andi	r24, 0x0F	; 15
 4bc:	8b bb       	out	0x1b, r24	; 27
		PORTA|=number;
 4be:	8b b3       	in	r24, 0x1b	; 27
 4c0:	68 2b       	or	r22, r24
 4c2:	6b bb       	out	0x1b, r22	; 27
		break;
 4c4:	08 95       	ret
		case 'B':
		case 'b':
		PORTB&=0x0F;
 4c6:	88 b3       	in	r24, 0x18	; 24
 4c8:	8f 70       	andi	r24, 0x0F	; 15
 4ca:	88 bb       	out	0x18, r24	; 24
		PORTB|=number;
 4cc:	88 b3       	in	r24, 0x18	; 24
 4ce:	68 2b       	or	r22, r24
 4d0:	68 bb       	out	0x18, r22	; 24
		break;
 4d2:	08 95       	ret
		case 'C':
		case 'c':
		PORTC&=0x0F;
 4d4:	85 b3       	in	r24, 0x15	; 21
 4d6:	8f 70       	andi	r24, 0x0F	; 15
 4d8:	85 bb       	out	0x15, r24	; 21
		PORTC|=number;
 4da:	85 b3       	in	r24, 0x15	; 21
 4dc:	68 2b       	or	r22, r24
 4de:	65 bb       	out	0x15, r22	; 21
		break;
 4e0:	08 95       	ret
		case 'D':
		case 'd':
		PORTD&=0x0F;
 4e2:	82 b3       	in	r24, 0x12	; 18
 4e4:	8f 70       	andi	r24, 0x0F	; 15
 4e6:	82 bb       	out	0x12, r24	; 18
		PORTD|=number;
 4e8:	82 b3       	in	r24, 0x12	; 18
 4ea:	68 2b       	or	r22, r24
 4ec:	62 bb       	out	0x12, r22	; 18
 4ee:	08 95       	ret

000004f0 <enable>:
	#endif
}

static void enable(void)
{
	DIO_write_pin(PORT_2,EN,1);
 4f0:	41 e0       	ldi	r20, 0x01	; 1
 4f2:	62 e0       	ldi	r22, 0x02	; 2
 4f4:	82 e4       	ldi	r24, 0x42	; 66
 4f6:	0e 94 91 01 	call	0x322	; 0x322 <DIO_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fa:	8f e9       	ldi	r24, 0x9F	; 159
 4fc:	9f e0       	ldi	r25, 0x0F	; 15
 4fe:	01 97       	sbiw	r24, 0x01	; 1
 500:	f1 f7       	brne	.-4      	; 0x4fe <enable+0xe>
 502:	00 c0       	rjmp	.+0      	; 0x504 <enable+0x14>
 504:	00 00       	nop
	_delay_ms(2);
	DIO_write_pin(PORT_2,EN,0);
 506:	40 e0       	ldi	r20, 0x00	; 0
 508:	62 e0       	ldi	r22, 0x02	; 2
 50a:	82 e4       	ldi	r24, 0x42	; 66
 50c:	0e 94 91 01 	call	0x322	; 0x322 <DIO_write_pin>
 510:	8f e9       	ldi	r24, 0x9F	; 159
 512:	9f e0       	ldi	r25, 0x0F	; 15
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <enable+0x24>
 518:	00 c0       	rjmp	.+0      	; 0x51a <enable+0x2a>
 51a:	00 00       	nop
 51c:	08 95       	ret

0000051e <LCD_send_cmd>:
	_delay_ms(2);
}

void LCD_send_cmd(char cmd)
{
 51e:	cf 93       	push	r28
 520:	c8 2f       	mov	r28, r24
	DIO_write_pin(PORT_2,RS,0);
 522:	40 e0       	ldi	r20, 0x00	; 0
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	82 e4       	ldi	r24, 0x42	; 66
 528:	0e 94 91 01 	call	0x322	; 0x322 <DIO_write_pin>
	#if defined eight_bits_mode
	DIO_write_port(PORT_1,cmd);
 52c:	6c 2f       	mov	r22, r28
 52e:	81 e4       	ldi	r24, 0x41	; 65
 530:	0e 94 14 02 	call	0x428	; 0x428 <DIO_write_port>
	enable();
 534:	0e 94 78 02 	call	0x4f0	; 0x4f0 <enable>
 538:	8f ec       	ldi	r24, 0xCF	; 207
 53a:	97 e0       	ldi	r25, 0x07	; 7
 53c:	01 97       	sbiw	r24, 0x01	; 1
 53e:	f1 f7       	brne	.-4      	; 0x53c <LCD_send_cmd+0x1e>
 540:	00 c0       	rjmp	.+0      	; 0x542 <LCD_send_cmd+0x24>
 542:	00 00       	nop
	enable();
	DIO_write_high_nibble(PORT_1,cmd);
	enable();
	#endif
	_delay_ms(1);
}
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <LCD_init>:
 548:	2f ef       	ldi	r18, 0xFF	; 255
 54a:	81 ee       	ldi	r24, 0xE1	; 225
 54c:	94 e0       	ldi	r25, 0x04	; 4
 54e:	21 50       	subi	r18, 0x01	; 1
 550:	80 40       	sbci	r24, 0x00	; 0
 552:	90 40       	sbci	r25, 0x00	; 0
 554:	e1 f7       	brne	.-8      	; 0x54e <LCD_init+0x6>
 556:	00 c0       	rjmp	.+0      	; 0x558 <LCD_init+0x10>
 558:	00 00       	nop

void LCD_init(void)
{
	_delay_ms(200);
	#if defined eight_bits_mode
	DIO_set_port_dir(PORT_1,0xff);
 55a:	6f ef       	ldi	r22, 0xFF	; 255
 55c:	81 e4       	ldi	r24, 0x41	; 65
 55e:	0e 94 01 02 	call	0x402	; 0x402 <DIO_set_port_dir>
	DIO_set_pin_dir(PORT_2,EN,1);
 562:	41 e0       	ldi	r20, 0x01	; 1
 564:	62 e0       	ldi	r22, 0x02	; 2
 566:	82 e4       	ldi	r24, 0x42	; 66
 568:	0e 94 21 01 	call	0x242	; 0x242 <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_2,RW,1);
 56c:	41 e0       	ldi	r20, 0x01	; 1
 56e:	61 e0       	ldi	r22, 0x01	; 1
 570:	82 e4       	ldi	r24, 0x42	; 66
 572:	0e 94 21 01 	call	0x242	; 0x242 <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_2,RS,1);
 576:	41 e0       	ldi	r20, 0x01	; 1
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	82 e4       	ldi	r24, 0x42	; 66
 57c:	0e 94 21 01 	call	0x242	; 0x242 <DIO_set_pin_dir>
	DIO_write_pin(PORT_2,RW,0);
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	82 e4       	ldi	r24, 0x42	; 66
 586:	0e 94 91 01 	call	0x322	; 0x322 <DIO_write_pin>
	
	LCD_send_cmd(EIGHT_BITS);  //8_bits_mode
 58a:	88 e3       	ldi	r24, 0x38	; 56
 58c:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_send_cmd>
 590:	8f ec       	ldi	r24, 0xCF	; 207
 592:	97 e0       	ldi	r25, 0x07	; 7
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <LCD_init+0x4c>
 598:	00 c0       	rjmp	.+0      	; 0x59a <LCD_init+0x52>
 59a:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);  //clear screen
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_send_cmd>
 5a2:	8f e1       	ldi	r24, 0x1F	; 31
 5a4:	9e e4       	ldi	r25, 0x4E	; 78
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <LCD_init+0x5e>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <LCD_init+0x64>
 5ac:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(CURSOR_Off_DISPLAY_ON); //curson on, display on
 5ae:	8c e0       	ldi	r24, 0x0C	; 12
 5b0:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_send_cmd>
 5b4:	8f ec       	ldi	r24, 0xCF	; 207
 5b6:	97 e0       	ldi	r25, 0x07	; 7
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <LCD_init+0x70>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <LCD_init+0x76>
 5be:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(ENTRY_MODE);  //sift curson to right
 5c0:	86 e0       	ldi	r24, 0x06	; 6
 5c2:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_send_cmd>
 5c6:	8f ec       	ldi	r24, 0xCF	; 207
 5c8:	97 e0       	ldi	r25, 0x07	; 7
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <LCD_init+0x82>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <LCD_init+0x88>
 5d0:	00 00       	nop
 5d2:	08 95       	ret

000005d4 <LCD_send_data>:
	#endif
	_delay_ms(1);
}

void LCD_send_data(char data)
{
 5d4:	cf 93       	push	r28
 5d6:	c8 2f       	mov	r28, r24
	DIO_write_pin(PORT_2,RS,1);
 5d8:	41 e0       	ldi	r20, 0x01	; 1
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	82 e4       	ldi	r24, 0x42	; 66
 5de:	0e 94 91 01 	call	0x322	; 0x322 <DIO_write_pin>
	#if defined eight_bits_mode
	DIO_write_port(PORT_1,data);
 5e2:	6c 2f       	mov	r22, r28
 5e4:	81 e4       	ldi	r24, 0x41	; 65
 5e6:	0e 94 14 02 	call	0x428	; 0x428 <DIO_write_port>
	enable();
 5ea:	0e 94 78 02 	call	0x4f0	; 0x4f0 <enable>
	enable();
	DIO_write_high_nibble(PORT_1,data);
	enable();
	#endif
	
}
 5ee:	cf 91       	pop	r28
 5f0:	08 95       	ret

000005f2 <LCD_send_string>:

void LCD_send_string(char* string)
{
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	ec 01       	movw	r28, r24
	while((*string!='\0'))
 5f8:	03 c0       	rjmp	.+6      	; 0x600 <LCD_send_string+0xe>
	{
		LCD_send_data(*string);
 5fa:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_send_data>
		string++;
 5fe:	21 96       	adiw	r28, 0x01	; 1
	
}

void LCD_send_string(char* string)
{
	while((*string!='\0'))
 600:	88 81       	ld	r24, Y
 602:	81 11       	cpse	r24, r1
 604:	fa cf       	rjmp	.-12     	; 0x5fa <LCD_send_string+0x8>
	{
		LCD_send_data(*string);
		string++;
	}
}
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	08 95       	ret

0000060c <LCD_clr_screen>:

void LCD_clr_screen(void)
{
	LCD_send_cmd(CLR_SCREEN);
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_send_cmd>
 612:	8f e1       	ldi	r24, 0x1F	; 31
 614:	9e e4       	ldi	r25, 0x4E	; 78
 616:	01 97       	sbiw	r24, 0x01	; 1
 618:	f1 f7       	brne	.-4      	; 0x616 <LCD_clr_screen+0xa>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <LCD_clr_screen+0x10>
 61c:	00 00       	nop
 61e:	08 95       	ret

00000620 <LED_init>:
#include "LED.h"
#include "DIO.h"

void LED_init(unsigned char port,unsigned char pin_number)
{
	DIO_set_pin_dir(port,pin_number,1);
 620:	41 e0       	ldi	r20, 0x01	; 1
 622:	0e 94 21 01 	call	0x242	; 0x242 <DIO_set_pin_dir>
 626:	08 95       	ret

00000628 <LED_turn_on>:
}

void LED_turn_on(unsigned char port,unsigned char pin_number)
{
	DIO_write_pin(port,pin_number,1);
 628:	41 e0       	ldi	r20, 0x01	; 1
 62a:	0e 94 91 01 	call	0x322	; 0x322 <DIO_write_pin>
 62e:	08 95       	ret

00000630 <LED_turn_off>:
}

void LED_turn_off(unsigned char port,unsigned char pin_number)
{
	DIO_write_pin(port,pin_number,0);
 630:	40 e0       	ldi	r20, 0x00	; 0
 632:	0e 94 91 01 	call	0x322	; 0x322 <DIO_write_pin>
 636:	08 95       	ret

00000638 <main>:
#include <util/delay.h>

volatile char counter;
int main(void)
{
    LCD_init();
 638:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_init>
	seven_seg_init_low_nibble();
 63c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <seven_seg_init_low_nibble>
	seven_seg_init_high_nibble();
 640:	0e 94 e7 03 	call	0x7ce	; 0x7ce <seven_seg_init_high_nibble>
	TIMER0_CTC_init_with_interrupt();
 644:	0e 94 06 04 	call	0x80c	; 0x80c <TIMER0_CTC_init_with_interrupt>
	LED_init('C',0);
 648:	60 e0       	ldi	r22, 0x00	; 0
 64a:	83 e4       	ldi	r24, 0x43	; 67
 64c:	0e 94 10 03 	call	0x620	; 0x620 <LED_init>
	LED_init('C',1);
 650:	61 e0       	ldi	r22, 0x01	; 1
 652:	83 e4       	ldi	r24, 0x43	; 67
 654:	0e 94 10 03 	call	0x620	; 0x620 <LED_init>
	LED_init('C',2);
 658:	62 e0       	ldi	r22, 0x02	; 2
 65a:	83 e4       	ldi	r24, 0x43	; 67
 65c:	0e 94 10 03 	call	0x620	; 0x620 <LED_init>
    while (1) 
    {
		count_green=30;
		count_yellow=5;
		count_red=20;
		LED_turn_on('C',0);
 660:	60 e0       	ldi	r22, 0x00	; 0
 662:	83 e4       	ldi	r24, 0x43	; 67
 664:	0e 94 14 03 	call	0x628	; 0x628 <LED_turn_on>
		LCD_clr_screen();
 668:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_clr_screen>
		LCD_send_string("      GO.....");
 66c:	80 e6       	ldi	r24, 0x60	; 96
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LCD_send_string>
	LED_init('C',2);
	char count_red,count_yellow,count_green;

    while (1) 
    {
		count_green=30;
 674:	ce e1       	ldi	r28, 0x1E	; 30
		count_yellow=5;
		count_red=20;
		LED_turn_on('C',0);
		LCD_clr_screen();
		LCD_send_string("      GO.....");
		while(count_green>0)
 676:	1a c0       	rjmp	.+52     	; 0x6ac <main+0x74>
		{
			if (counter>=100)
 678:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 67c:	84 36       	cpi	r24, 0x64	; 100
 67e:	b0 f0       	brcs	.+44     	; 0x6ac <main+0x74>
			{
				counter=0;
 680:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__data_end>
				count_green--;
 684:	c1 50       	subi	r28, 0x01	; 1
				seven_seg_write_low_nibble(count_green/10);
 686:	dd ec       	ldi	r29, 0xCD	; 205
 688:	cd 9f       	mul	r28, r29
 68a:	d1 2d       	mov	r29, r1
 68c:	11 24       	eor	r1, r1
 68e:	d6 95       	lsr	r29
 690:	d6 95       	lsr	r29
 692:	d6 95       	lsr	r29
 694:	8d 2f       	mov	r24, r29
 696:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <seven_seg_write_low_nibble>
				seven_seg_write_high_nibble(count_green%10);
 69a:	dd 0f       	add	r29, r29
 69c:	8d 2f       	mov	r24, r29
 69e:	88 0f       	add	r24, r24
 6a0:	88 0f       	add	r24, r24
 6a2:	d8 0f       	add	r29, r24
 6a4:	8c 2f       	mov	r24, r28
 6a6:	8d 1b       	sub	r24, r29
 6a8:	0e 94 01 04 	call	0x802	; 0x802 <seven_seg_write_high_nibble>
		count_yellow=5;
		count_red=20;
		LED_turn_on('C',0);
		LCD_clr_screen();
		LCD_send_string("      GO.....");
		while(count_green>0)
 6ac:	c1 11       	cpse	r28, r1
 6ae:	e4 cf       	rjmp	.-56     	; 0x678 <main+0x40>
 6b0:	8f e1       	ldi	r24, 0x1F	; 31
 6b2:	9e e4       	ldi	r25, 0x4E	; 78
 6b4:	01 97       	sbiw	r24, 0x01	; 1
 6b6:	f1 f7       	brne	.-4      	; 0x6b4 <main+0x7c>
 6b8:	00 c0       	rjmp	.+0      	; 0x6ba <main+0x82>
 6ba:	00 00       	nop
				seven_seg_write_high_nibble(count_green%10);
			}
			
		}
		 _delay_ms(10);  // Introduce a small delay to reduce CPU load
		LED_turn_off('C',0);
 6bc:	60 e0       	ldi	r22, 0x00	; 0
 6be:	83 e4       	ldi	r24, 0x43	; 67
 6c0:	0e 94 18 03 	call	0x630	; 0x630 <LED_turn_off>
		LED_turn_on('C',1);
 6c4:	61 e0       	ldi	r22, 0x01	; 1
 6c6:	83 e4       	ldi	r24, 0x43	; 67
 6c8:	0e 94 14 03 	call	0x628	; 0x628 <LED_turn_on>
		LCD_clr_screen();
 6cc:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_clr_screen>
		LCD_send_string("     Ready");
 6d0:	8e e6       	ldi	r24, 0x6E	; 110
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LCD_send_string>
	char count_red,count_yellow,count_green;

    while (1) 
    {
		count_green=30;
		count_yellow=5;
 6d8:	c5 e0       	ldi	r28, 0x05	; 5
		 _delay_ms(10);  // Introduce a small delay to reduce CPU load
		LED_turn_off('C',0);
		LED_turn_on('C',1);
		LCD_clr_screen();
		LCD_send_string("     Ready");
		while(count_yellow>0)
 6da:	1a c0       	rjmp	.+52     	; 0x710 <main+0xd8>
		{
			if (counter>=100)
 6dc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 6e0:	84 36       	cpi	r24, 0x64	; 100
 6e2:	b0 f0       	brcs	.+44     	; 0x710 <main+0xd8>
			{
				counter=0;
 6e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__data_end>
				count_yellow--;
 6e8:	c1 50       	subi	r28, 0x01	; 1
				seven_seg_write_low_nibble(count_yellow/10);
 6ea:	dd ec       	ldi	r29, 0xCD	; 205
 6ec:	cd 9f       	mul	r28, r29
 6ee:	d1 2d       	mov	r29, r1
 6f0:	11 24       	eor	r1, r1
 6f2:	d6 95       	lsr	r29
 6f4:	d6 95       	lsr	r29
 6f6:	d6 95       	lsr	r29
 6f8:	8d 2f       	mov	r24, r29
 6fa:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <seven_seg_write_low_nibble>
				seven_seg_write_high_nibble(count_yellow%10);
 6fe:	dd 0f       	add	r29, r29
 700:	8d 2f       	mov	r24, r29
 702:	88 0f       	add	r24, r24
 704:	88 0f       	add	r24, r24
 706:	d8 0f       	add	r29, r24
 708:	8c 2f       	mov	r24, r28
 70a:	8d 1b       	sub	r24, r29
 70c:	0e 94 01 04 	call	0x802	; 0x802 <seven_seg_write_high_nibble>
		 _delay_ms(10);  // Introduce a small delay to reduce CPU load
		LED_turn_off('C',0);
		LED_turn_on('C',1);
		LCD_clr_screen();
		LCD_send_string("     Ready");
		while(count_yellow>0)
 710:	c1 11       	cpse	r28, r1
 712:	e4 cf       	rjmp	.-56     	; 0x6dc <main+0xa4>
				count_yellow--;
				seven_seg_write_low_nibble(count_yellow/10);
				seven_seg_write_high_nibble(count_yellow%10);
			}
		}
		LED_turn_off('C',1);
 714:	61 e0       	ldi	r22, 0x01	; 1
 716:	83 e4       	ldi	r24, 0x43	; 67
 718:	0e 94 18 03 	call	0x630	; 0x630 <LED_turn_off>
		LED_turn_on('C',2);
 71c:	62 e0       	ldi	r22, 0x02	; 2
 71e:	83 e4       	ldi	r24, 0x43	; 67
 720:	0e 94 14 03 	call	0x628	; 0x628 <LED_turn_on>
		LCD_clr_screen();
 724:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_clr_screen>
		LCD_send_string("      STOP");
 728:	89 e7       	ldi	r24, 0x79	; 121
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LCD_send_string>
 730:	8f e1       	ldi	r24, 0x1F	; 31
 732:	9e e4       	ldi	r25, 0x4E	; 78
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	f1 f7       	brne	.-4      	; 0x734 <main+0xfc>
 738:	00 c0       	rjmp	.+0      	; 0x73a <main+0x102>
 73a:	00 00       	nop

    while (1) 
    {
		count_green=30;
		count_yellow=5;
		count_red=20;
 73c:	c4 e1       	ldi	r28, 0x14	; 20
 73e:	1a c0       	rjmp	.+52     	; 0x774 <main+0x13c>
		LCD_clr_screen();
		LCD_send_string("      STOP");
		 _delay_ms(10);  // Introduce a small delay to reduce CPU load
		while(count_red>0)
		{
			if (counter>=100)
 740:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 744:	84 36       	cpi	r24, 0x64	; 100
 746:	b0 f0       	brcs	.+44     	; 0x774 <main+0x13c>
			{
				counter=0;
 748:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__data_end>
				count_red--;
 74c:	c1 50       	subi	r28, 0x01	; 1
				seven_seg_write_low_nibble(count_red/10);
 74e:	dd ec       	ldi	r29, 0xCD	; 205
 750:	cd 9f       	mul	r28, r29
 752:	d1 2d       	mov	r29, r1
 754:	11 24       	eor	r1, r1
 756:	d6 95       	lsr	r29
 758:	d6 95       	lsr	r29
 75a:	d6 95       	lsr	r29
 75c:	8d 2f       	mov	r24, r29
 75e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <seven_seg_write_low_nibble>
				seven_seg_write_high_nibble(count_red%10);
 762:	dd 0f       	add	r29, r29
 764:	8d 2f       	mov	r24, r29
 766:	88 0f       	add	r24, r24
 768:	88 0f       	add	r24, r24
 76a:	d8 0f       	add	r29, r24
 76c:	8c 2f       	mov	r24, r28
 76e:	8d 1b       	sub	r24, r29
 770:	0e 94 01 04 	call	0x802	; 0x802 <seven_seg_write_high_nibble>
		LED_turn_off('C',1);
		LED_turn_on('C',2);
		LCD_clr_screen();
		LCD_send_string("      STOP");
		 _delay_ms(10);  // Introduce a small delay to reduce CPU load
		while(count_red>0)
 774:	c1 11       	cpse	r28, r1
 776:	e4 cf       	rjmp	.-56     	; 0x740 <main+0x108>
				count_red--;
				seven_seg_write_low_nibble(count_red/10);
				seven_seg_write_high_nibble(count_red%10);
			}
		}
		LED_turn_off('C',2);
 778:	62 e0       	ldi	r22, 0x02	; 2
 77a:	83 e4       	ldi	r24, 0x43	; 67
 77c:	0e 94 18 03 	call	0x630	; 0x630 <LED_turn_off>
    }
 780:	6f cf       	rjmp	.-290    	; 0x660 <main+0x28>

00000782 <__vector_10>:
}

// Timer0 Compare Match ISR
ISR(TIMER0_COMP_vect)
{
 782:	1f 92       	push	r1
 784:	0f 92       	push	r0
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	0f 92       	push	r0
 78a:	11 24       	eor	r1, r1
 78c:	8f 93       	push	r24
	counter++;
 78e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 792:	8f 5f       	subi	r24, 0xFF	; 255
 794:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
}
 798:	8f 91       	pop	r24
 79a:	0f 90       	pop	r0
 79c:	0f be       	out	0x3f, r0	; 63
 79e:	0f 90       	pop	r0
 7a0:	1f 90       	pop	r1
 7a2:	18 95       	reti

000007a4 <seven_seg_init_low_nibble>:
	#endif
}

void seven_seg_init_low_nibble(void)
{
	DIO_set_pin_dir(seven_seg_port,0,1);
 7a4:	41 e0       	ldi	r20, 0x01	; 1
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	84 e4       	ldi	r24, 0x44	; 68
 7aa:	0e 94 21 01 	call	0x242	; 0x242 <DIO_set_pin_dir>
	DIO_set_pin_dir(seven_seg_port,1,1);
 7ae:	41 e0       	ldi	r20, 0x01	; 1
 7b0:	61 e0       	ldi	r22, 0x01	; 1
 7b2:	84 e4       	ldi	r24, 0x44	; 68
 7b4:	0e 94 21 01 	call	0x242	; 0x242 <DIO_set_pin_dir>
	DIO_set_pin_dir(seven_seg_port,2,1);
 7b8:	41 e0       	ldi	r20, 0x01	; 1
 7ba:	62 e0       	ldi	r22, 0x02	; 2
 7bc:	84 e4       	ldi	r24, 0x44	; 68
 7be:	0e 94 21 01 	call	0x242	; 0x242 <DIO_set_pin_dir>
	DIO_set_pin_dir(seven_seg_port,3,1);
 7c2:	41 e0       	ldi	r20, 0x01	; 1
 7c4:	63 e0       	ldi	r22, 0x03	; 3
 7c6:	84 e4       	ldi	r24, 0x44	; 68
 7c8:	0e 94 21 01 	call	0x242	; 0x242 <DIO_set_pin_dir>
 7cc:	08 95       	ret

000007ce <seven_seg_init_high_nibble>:
}

void seven_seg_init_high_nibble(void)
{
	DIO_set_pin_dir(seven_seg_port,4,1);
 7ce:	41 e0       	ldi	r20, 0x01	; 1
 7d0:	64 e0       	ldi	r22, 0x04	; 4
 7d2:	84 e4       	ldi	r24, 0x44	; 68
 7d4:	0e 94 21 01 	call	0x242	; 0x242 <DIO_set_pin_dir>
	DIO_set_pin_dir(seven_seg_port,5,1);
 7d8:	41 e0       	ldi	r20, 0x01	; 1
 7da:	65 e0       	ldi	r22, 0x05	; 5
 7dc:	84 e4       	ldi	r24, 0x44	; 68
 7de:	0e 94 21 01 	call	0x242	; 0x242 <DIO_set_pin_dir>
	DIO_set_pin_dir(seven_seg_port,6,1);
 7e2:	41 e0       	ldi	r20, 0x01	; 1
 7e4:	66 e0       	ldi	r22, 0x06	; 6
 7e6:	84 e4       	ldi	r24, 0x44	; 68
 7e8:	0e 94 21 01 	call	0x242	; 0x242 <DIO_set_pin_dir>
	DIO_set_pin_dir(seven_seg_port,7,1);
 7ec:	41 e0       	ldi	r20, 0x01	; 1
 7ee:	67 e0       	ldi	r22, 0x07	; 7
 7f0:	84 e4       	ldi	r24, 0x44	; 68
 7f2:	0e 94 21 01 	call	0x242	; 0x242 <DIO_set_pin_dir>
 7f6:	08 95       	ret

000007f8 <seven_seg_write_low_nibble>:
}

void seven_seg_write_low_nibble(unsigned char number)
{
DIO_write_low_nibble(seven_seg_port,number);
 7f8:	68 2f       	mov	r22, r24
 7fa:	84 e4       	ldi	r24, 0x44	; 68
 7fc:	0e 94 27 02 	call	0x44e	; 0x44e <DIO_write_low_nibble>
 800:	08 95       	ret

00000802 <seven_seg_write_high_nibble>:
}

void seven_seg_write_high_nibble(unsigned char number)
{
	DIO_write_high_nibble(seven_seg_port,number);
 802:	68 2f       	mov	r22, r24
 804:	84 e4       	ldi	r24, 0x44	; 68
 806:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_write_high_nibble>
 80a:	08 95       	ret

0000080c <TIMER0_CTC_init_with_interrupt>:


void TIMER0_CTC_init_with_interrupt(void)
{
	//determine CTC mode
	CLR_BIT(TCCR0,WGM00);
 80c:	83 b7       	in	r24, 0x33	; 51
 80e:	8f 7b       	andi	r24, 0xBF	; 191
 810:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
 812:	83 b7       	in	r24, 0x33	; 51
 814:	88 60       	ori	r24, 0x08	; 8
 816:	83 bf       	out	0x33, r24	; 51
	//load value in OCR0 ,to compare match
	OCR0=80;
 818:	80 e5       	ldi	r24, 0x50	; 80
 81a:	8c bf       	out	0x3c, r24	; 60
	//determine prescaler=1024, timer0_clock=(cpu_clock/prescaler)
	SET_BIT(TCCR0,CS00);
 81c:	83 b7       	in	r24, 0x33	; 51
 81e:	81 60       	ori	r24, 0x01	; 1
 820:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
 822:	83 b7       	in	r24, 0x33	; 51
 824:	8d 7f       	andi	r24, 0xFD	; 253
 826:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 828:	83 b7       	in	r24, 0x33	; 51
 82a:	84 60       	ori	r24, 0x04	; 4
 82c:	83 bf       	out	0x33, r24	; 51
	//enable interrupt to compare match
	sei();
 82e:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
 830:	89 b7       	in	r24, 0x39	; 57
 832:	82 60       	ori	r24, 0x02	; 2
 834:	89 bf       	out	0x39, r24	; 57
 836:	08 95       	ret

00000838 <__tablejump2__>:
 838:	ee 0f       	add	r30, r30
 83a:	ff 1f       	adc	r31, r31
 83c:	05 90       	lpm	r0, Z+
 83e:	f4 91       	lpm	r31, Z
 840:	e0 2d       	mov	r30, r0
 842:	09 94       	ijmp

00000844 <_exit>:
 844:	f8 94       	cli

00000846 <__stop_program>:
 846:	ff cf       	rjmp	.-2      	; 0x846 <__stop_program>
